{\rtf1\ansi\ansicpg1252\cocoartf1265
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww12160\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 COP5615 Distributed Operating System Project 1 Report\
Date: 2/10/2014\
Due Date: 2/10/2014 5pm\
Student Name: Yang Jiao  \
UFID: 43878738\
\
1. What the system does\
This is a simple client/server application, which allows clients connecting to server, making request and leaving server. \
On server side, it maintains a small file system that supports file deletion, file upload, file modification and searching on files. Also it has a lock system that control the availability of files. On client side, it can access to the server using server name and port number. Then it is followed by a request, including lock on files, upload files, delete files, write files, etc.\
\
2-3. Processes & State\
The server side has a main thread called Server. It involves another two classes ProcessRequest and  \
myDB. ProcesssRequest takes the client\'92s requests and return the result. myDB is a small file system that supports client\'92s requests.\
The client side has a main thread called client. It has the functionality of analyzing user input and sent request to server.\
Read Lock is invoked by command: [ServerName] [Port] READLOCK [FileName]\
The read lock state is maintained by a file ReadLock.txt on disc.\
Write Lock is invoked by command: [ServerName] [Port] WRITELOCK [FileName]\
The write lock state is maintained by a file WriteLock.txt on disc.\
Release Lock is invoked by command: [ServerName] [Port] RELEASELOCK [FileName]\
Delete file is invoked by command: [ServerName] [Port] DELETE [FileName]\
Upload file is invoked by command: [ServerName] [Port] UPLOAD [FileName]\
Write file is invoked by command: [ServerName] [Port] WRITE [FileName]\
The files  state on server is maintained by a file named metafile.txt on disc.\
\
4-5-6. Message Type & Actions & Description\
There are several client requests that supported by the system.\
READLOCK [filename]: set a read lock on file.\
This message is generated by client and send to server to require read access. If no write lock on the file, the client will get the read lock and can start read the file.\
If the server receive this message, it will check if there is a write lock on the file. If no, a read lock will be granted to this client. If yes, the request will be denied.\
\
WRITELOCK [filename]: set a write lock on file.\
If the client want to write a file, it must acquire write lock first. If no write lock on the file, the client will get the write lock.\
If the server receive this message, it will check if there is a write lock on the file. If no, a write lock will be granted to this client. If yes, the request will be denied.\
\
RELEASELOCK [filename]: release any lock on file.\
This request release read lock or write lock owned by the client. Every time client finishes read/write, it should release the lock and let other clients in.\
If the server receive this message, it will check if there is a write lock  or read lock on the file. If yes, the lock will be removed.\
\
DELETE [filename]:  delete the file on server.\
This request will delete the file on server, if there are no locks on the file.\
If the server receive this message, it will check if there is a write lock or read lock on the file. If no, the file will be removed on server. If yes, the request will be denied.\
\
UPLOAD [filename]: upload the file from client.\
This request will upload a file from clients to server.\
If the server receive this message, it will upload file from client to server.\
\
WRITE [filename]: make modification to file on server.\
This request will make changes to the file. But clients should get write lock first. \
If the server receive this message, it will check if there is a write lock on the file. If yes, the file will be modified by client on server. If no, the request will be denied.\
\
SHUTDOWN SERVER: shut down the server.\
This request will shut down the server.\
If the server receive this message, it will clean up the database and connections, and  then close the socket.\
\
7. User Interface.\
No specific user interface for each process type.\
\
8. Test runs\
on client side, cmd format is [ServerName] [Port] [Request]\
Client Side:\
thunder 50000 READLOCK dbfile.txt\
Server Side:\
get read lock on file dbfile.txt\
\
Client Side:\
thunder 50000 READ dbfile.txt\
Server Side:\
[file contents shown on server]\
\
Client Side:\
thunder 50000 RELEASELOCK dbfile.txt\
Server Side:\
lock release\
\
Client Side:\
thunder 50000 DELETE dbfile.txt\
Server Side:\
dbfile.txt deleted\
\
\
Client Side:\
thunder 50000 UPLOAD dbfile.txt\
Server Side:\
dbfile.txt uploaded\
\
\
Client Side:\
thunder 50000 WRITELOCK dbfile.txt\
Server Side:\
get write lock\
\
Client Side:\
thunder 50000 WRITE dbfile.txt [tuple format]\
Server Side:\
write done!\
\
Client Side:\
thunder 50000 RELEASELOCK dbfile.txt\
Server Side:\
lock release\
}